Working TODO Outline for Titanium Docs
==========================================
LAST MODIFIED: 11.14.10 / 6:54 PM Pacific
==========================================
REVISION: 2
==========================================

===============PRIORITY KEY===============
	#	 - High
	#*	 - High (and all children)
	$	 - Med
	$*	 - Med (and all children)
	%	 - Low
	%*	 - Low (and all children)
	@	 - Exception
	!	 - Important
==========================================

=================TAG IT!==================
If possible, tag item(s) you are currently
working on, as we build out priority 
article skeletons/scope. Contact contributor 
if you need to collaborate on tagged item. 
==========================================

==============GUIDE SKELETON==============
	- Guide Scope
	- Prerequisite Capability/Guides
	- Guide Walkthrough
		- Source
			- Ballon/branch platform-specific source.
		- Assets (Screenshots/Video)
	- Guide Summary
	- Related/Additional Guides/Resources
==========================================

ARCHITECTURE
	- Using Table Views
	- How to Internationalize your Application (1.5)
	- Working with Local Data
		- storage in SQLite [#] (hal)
		- storage in Properties [#] (hal)
		- filesystem
	- Working with Remote Data
		- web services (include XML, SOAP, JSON, Authentication)
		- remote fetch and storage, local cache from file
		- push notifications
	- Using Multimedia Capabilities
		- video
		- audio (stream, local play)
	- Using Location Services
		- geolocation
		- forward
		- reverse
		- integration of native maps
		- map routing
	- Application Performance Optimizations
		- table views
		- caching techniques
	- Building Titanium Factories
	- Using HTML5 webviews
	- Understanding Application Security

WRITING APPLICATIONS IN JAVASCRIPT [#] (Fred)
	- JS Overview and Additional Resources
		- General Overview of JavaScript
		- JavaScript Foundations (External)
			- Mozilla, Yahoo, etc.
			- Published Works
	- Titanium JS Built-In Functionality
		- Timers, etc.
	- JavaScript Best Practices
		- Globals, Scope and Closures
		- JavaScript Patterns
		- Understanding 'Event-Driven'
			- To Listen or Not to Listen
		- Managing Assets and Organizing Source with Titanium.include
			- See more on general, abstract development best practices. [@]
				
TITANIUM SUPPORT
	- How to get help
		- Q&A and search
		- available training, video, and doc resources
		- IRC channel
		- Google!
		- Pro support
	- What do I do if I think I found a bug?
		- test case
		- Lighthouse
		- necessary data to capture

DEVELOPMENT TOOLS
	- Testing your applications
		- how to test
		- using command line
	- Titanium Developer
		- explain layout tool, etc.
	- Titanium Command-line tool
		- explain commands

PLATFORM SPECIFIC
	- Android specific Documentation
		- Android specific APIs, features, capabilities, differences
	- The Hitchiker's Guide to Android
		- What's in the box (tools, apps, binaries, skins, etc)
		- 10,000 overview of how a native app works
		- 10,000 overview of how Titanium leverages the native platform tools for build/deploy/runtime	
	- iOS Specific documentation
		- iOS specific APIs, features, capabilities, differences
	- The Hitchiker's Guide to iOS
	- Blackberry specific documentation
		- Blackberry specific APIs, features, capabilities, differences
	- The Hitchiker's Guide to Blackberry
	- Distributing your App to the App Store
		(we don't need to document the full process, just provide pointers and any tips, differences, etc)
		- iOS Marketplace 
		- Android Marketplace

TITANIUM TUTORIALS
	- Building from source code
		(some of this is covered in contribute too)
		- how to build from source code
		- how to report issues/ pull requests, etc.
		- contribution (CLA link, etc)

EXTENDING TITANIUM
	- CommonJS
	- Example Frameworks (Local, External)	
	
DESIGNING FOR CROSS-PLATFORM
	- impacts, decisions, when and how
	- how to structure your app for cross-platform
	- what's different between platforms
	- HTML5 vs native UI
	
USER INTERFACE DESIGN (Fred)
	- Design Considerations for Desktop and Mobile
	- Transition Effects
	- Animations
	- Designer Techniques (Grids, Composition, Etc.)
	- Advanced Layout
	- UI Factories
	- Tool Best Practices (photoshop, etc), templates, etc